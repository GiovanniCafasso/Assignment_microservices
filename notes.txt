docker container rm {NAME}  # remove container
python3 manage.py runserver 0.0.0.0:8000

# delete all container stopped
docker system prune --all --force

# get a bash shell in the container
docker exec -it <container name> /bin/bash

# esempio json to load
{
    "title": "prova_title",
    "author": "prova_author"
}

{
    "id_book": 1,
    "id_customer": 2
}


python3 api/manage.py runserver 0.0.0.0:8000


docker exec -it book /bin/bash
docker exec -it customer /bin/bash
docker exec -it borrowing /bin/bash

python api/manage.py makemigrations books
python api/manage.py migrate

python microservices_customer/manage.py makemigrations customers
python microservices_customer/manage.py migrate

python microservices_borrowing/manage.py makemigrations borrowing
python microservices_borrowing/manage.py migrate


book --> python api/manage.py test books
customer -->  python microservices_customers/manage.py test customers 

## rimuovere immagine
docker rmi --force <id_images> 

##########
RIMOSSO DA book-secrets.yaml
###########
STATIC_ACCESS_KEY_ID=
STATIC_SECRET_KEY=

##############
RIMOSSO DA book-configMap.yaml - data
##############
STATIC_ENDPOINT_URL: ""
STATIC_BUCKET_NAME: ""


ip per raggiungere destinazioni:
10.101.104.194  book
10.105.157.38   customer
10.99.247.69    borrowing


importare nei ms ConfigMap quando non sei in production 
verficare collegamento corretto del borrowing ai book e customer ms (service)