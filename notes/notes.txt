docker container rm {NAME}  # remove container

# delete all container stopped
docker system prune --all --force

# get a bash shell in the container
docker exec -it <container name> bash

# example json to load
{
    "title": "prova_title",
    "author": "prova_author"
}

{
    "id_book": 1,
    "id_customer": 2
}


python3 manage.py runserver 0.0.0.0:8000

python manage.py makemigrations books
python manage.py migrate

python manage.py makemigrations customers
python manage.py migrate

python manage.py makemigrations borrowing
python manage.py migrate


book --> python manage.py test books

## rimuovere immagine
docker rmi --force <id_images> 


destinazioni:
http://192.168.49.2:32102/books  book
http://192.168.49.2:32103/customers  customer
http://192.168.49.2:32104/borrowing    borrowing


# Far partire kibana 
kubectl port-forward svc/kibana 5601:5601

########################################################################

bloccato nel test,
testato alcune modifiche fallimentari, per tornare indietro non ho fatto la commit-push
modifiche applicate al db originale, non va bene
1 test fallisce

# create 2 books and get all
def test_post_plus_get(self):
    print("Test create 2 books and get all")
    Book.objects.create(title="title1", author="author1")
    Book.objects.create(title="title2", author="author2")
    print("Created books")
    books = Book.objects.all()
    serializer = BookSerializer(books, many=True)
    print("Serializer book: " + str(serializer.data))
    print("*********************************************")


    # Update book
    def test_update(self):
        # Update author with 'Mario' where id=1
        # Book.objects.select_for_update(id=1, author="Mario")
        Book.objects.update(author="Mario")
        print("Updated book")
        books = Book.objects.all()
        serializer = BookSerializer(books, many=True)
        print("Serializer book: " + str(serializer.data))
        print("*********************************************")